Junit tests needed:

AREA
VARS 
•	eSpaceSystem system;
•	String name;
•	int location;
CONSTANTS
•	public static final int MIN_SYSTEM_BOUNDARY = 0;
•	public static final int MAX_SYSTEM_BOUNDARY = 12;
CONSTRUCTOR WITH ARGS
•	public Area(eSpaceSystem system, String name, int location)
BOARD
CONSTANTS
•	public static final int PROPERTYBOARD_SIZE = 10;
ARRAYLIST
•	private static ArrayList<Area> movementBoard = new ArrayList<>();
•	private static ArrayList<Element> propertyBoard = new ArrayList<>();
METHODS
•	public static boolean checkArea(Player currentPlayer)
ELEMENT
VARS 
•	int blueprintCost;
•	int devOneCost;
•	int devTwoCost;
•	int devThreeCost;
•	int blueprintFee;
•	int devOneFee;
•	int devTwoFee;
•	int devThreeFee;
•	int currentFee;
•	int developmentLevel;
•	int maxInGroup;
•	Player owner;
•	Player sysOwner;
•	Object sysRef;

	CONSTANTS
•	public static final int MIN_DEV_LEVEL = 0;
•	public static final int MAX_DEV_LEVEL = 4;
CONSTRUCTOR WITH ARGS
•	public Element(eSpaceSystem system, String name, int location, Player sysOwner, int blueprintCost, int devOneCost, int devTwoCost, int devThreeCost, int blueprintFee, int devOneFee, int devTwoFee, int devThreeFee, int currentFee, int developmentLevel, Player owner, int maxInGroup)
METHODS
•	public int displayNextDevCost(eSpaceSystem eSpaceSystem)
•	public String displayDevelopmentLevel()
•	public void incremenetDevelopmentLevel()
•	public void updateCurrentFee()
ESPACESYSTEM
ENUMS
•	NEUTRAL 
•	SPACE_LAUNCH_SYSTEM 
•	ORION_SPACECRAFT 
•	LANDING_SYSTEMS 
•	ARTEMIS_BASE_CAMP 
GAMEADMIN
	    	
CONSTANTS
•	public static final int MIN_NUM_PLAYERS = 2;
•	public static final int MAX_NUM_PLAYERS = 4;
•	public static final int STARTING_BITCOIN = 500;
•	public static final int STARTING_XP = 0;
•	public static final int STARTING_POSITION = 0;
	ARRAYLIST
•	public static ArrayList<Player> playerOrder;
•	ArrayList<Player> list = createPlayers();
•	public static ArrayList<Player> displayPlayerList(ArrayList<Player> playerList)
•	public static ArrayList<Player> nextPlayer(ArrayList<Player> playerList)
•	public static Player setCurrentPlayer(ArrayList<Player> playerList)
•	
METHODS
•	public static void buyBlueprint(Player currentPlayer, Element currentElement)
•	private static boolean checkIfPlayerOwnsAnySystems(Player currentPlayer)
•	public static void completeGame(Player currentPlayer, ArrayList<Player> playerOrder)
•	public static void developElement(int index, Player currentPlayer)
•	public static ArrayList<Player> displayPlayerList(ArrayList<Player> playerList)
•	public static eSpaceSystem getSystemOfCurrentElement(Player currentPlayer)
•	private static boolean checkIfPlayerOwnsAnySystems(Player currentPlayer)
•	public static void manageResources(Player currentPlayer, ArrayList<Element> propertyBoard)
•	public static boolean payFee(Player currentPlayer, Element currentElement)
•	public static void playerMovement(Player currentPlayer, ArrayList<Area> movementBoard)
•	public static void printElementsWherePlayerOwnsSystem(Player currentPlayer)
•	public static boolean quitGameEndTurn(Player currentPlayer)
•	public static boolean quitGameTakeTurn(Player currentPlayer)
•	public static void updateSystemOwners(Player currentPlayer)
•	public void gamePlay()
NEUTRALELEMENT
CONSTRUCTOR
•	public NeutralElement(eSpaceSystem esystem, String name, int location) {}
// inherited attributes from Area superclass
PLAYER
VARS 
•	String name;
•	int XP;
•	int btc; 
•	int position;
	CONSTANTS
•	public static final int MIN_SYSTEM_BOUNDARY = 0;
•	public static final int MAX_SYSTEM_BOUNDARY = 12;
•	public static final int MIN_NAME_LENGTH = 2;
•	public static final int MAX_NAME_LENGTH = 20;
CONSTRUCTOR WITH ARGS
•	public Player(String name, int btc, int XP, int position) {}
METHODS
•	public int takeTurn() {}
