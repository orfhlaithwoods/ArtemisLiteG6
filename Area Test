package artemisLiteTest;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import artemisLite.Area;

class AreaTest {

	// declare the variables
	String ValidName;
	String InValidName;
	int ValidLocationUpper;
	int InvalidLocationUpper;
	int ValidLocationLower;
	int InValidLocationLower;
	eSpaceSystem ValidESpaceSystem;
	eSpaceSystem InValidESpaceSystem;

	
	@BeforeEach
	void setUp() throws Exception {
		
		ValidName = "ValidName";
		InValidName = "";
		ValidLocationUpper = 12;
		InvalidLocationUpper = 13;
		ValidLocationLower = 1;
		InValidLocationLower = 0;
		ValidESpaceSystem = eSpaceSystem.SPACE_LAUNCH_SYSTEM;
		InValidESpaceSystem = eSpaceSystem.InValidESpaceSystem; 
		
		}

	@Test
	public void testingConstructorArgs() {
		
		Area a = new Area(ValidName, ValidLocationLower, ValidLocationUpper, ValidESpaceSystem);
		
		assertEquals(ValidName, a.getName());
		assertEquals(ValidLocationLower, a.getLocation());
		assertEquals(ValidLocationUpper, a.getLocation());
		assertEquals(ValidESpaceSystem, a.getSystem());
	}
	
	@Test
	void testValidName() {
		Area a = new Area();
		a.setName(ValidName);
		assertEquals(ValidName, a.getName());
	}
	
	@Test
	void testInValidName() {
		Area a = new Area();
		assertThrows(IllegalArgumentException.class, ()-> {
			a.setName(InValidName);
		});
	}
	
	@Test
	void testValidLocationLower() {
		Area a = new Area();
		a.setLocation(ValidLocationLower);
		assertEquals(ValidLocationLower, a.getLocation());
	}
	
	@Test
	void testInValidLocationLower() {
		Area a = new Area();
		assertThrows(IllegalArgumentException.class, ()-> {
			a.setLocation(InValidLocationLower);
		});
	}
	
	@Test
	void testValidLocationUpper() {
		Area a = new Area();
		a.setLocation(ValidLocationUpper);
		assertEquals(ValidLocationUpper, a.getLocation());
	}
	
	@Test
	void testInValidLocationUpper() {
		Area a = new Area();
		assertThrows(IllegalArgumentException.class, ()-> {
			a.setLocation(InvalidLocationUpper);
		});
	}
	
	@Test
	void testESpaceSystem() {
		Area a = new Area();
		a.setSystem(ValidESpaceSystem);
		assertEquals(ValidESpaceSystem, a.getSystem());
	}
	
	@Test 
	void testInValidESpaceSystem() {
		Area a = new Area();
		assertThrows(IllegalArgumentException.class, ()-> {
			a.setSystem(InValidEspaceSystem)
		});
	}

}
